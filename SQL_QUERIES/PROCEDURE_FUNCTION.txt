--1
CREATE OR REPLACE PROCEDURE UPDATERIDER(OID IN  NUMBER) IS
  RIDERID NUMBER;
BEGIN  
  SELECT DELIVER_MAN_ID INTO RIDERID FROM ORDER_SERIAL WHERE ORDER_ID=OID;
  UPDATE DELIVER_MAN SET DELIVERY_COUNT = DELIVERY_COUNT-1 WHERE DELIVER_MAN_ID=RIDERID;
END;

--2
CREATE OR REPLACE TRIGGER RCAP 
BEFORE INSERT
ON DELIVER_MAN
FOR EACH ROW
DECLARE
  NAME VARCHAR2(100);
BEGIN  
  NAME := INITCAP(:NEW.DELIVER_MAN_NAME);
  NAME:= TRIM(NAME);
  :NEW.DELIVER_MAN_NAME:=NAME;
END;

--3
CREATE OR REPLACE TRIGGER CAP 
BEFORE INSERT
ON USERS
FOR EACH ROW
DECLARE
  NAME VARCHAR2(100);
BEGIN  
  NAME := INITCAP(:NEW.FULLNAME);
  NAME:= TRIM(NAME);
  :NEW.FULLNAME:=NAME;
END;

--4
CREATE OR REPLACE PROCEDURE CHANGE_PASSWORD(USER_NAME IN VARCHAR2,PASS IN VARCHAR2 )IS
BEGIN  
  UPDATE USERS SET PASSWORD = PASS WHERE USERNAME=USER_NAME;
END;

--5
CREATE OR REPLACE FUNCTION GETUSERID(OID IN NUMBER)RETURN VARCHAR2 IS
  UID VARCHAR2(50);
BEGIN  
  SELECT USER_ID INTO UID FROM ORDERS WHERE ORDER_ID=OID;
  RETURN UID;
END;


--6
CREATE OR REPLACE PROCEDURE UPDATE_COUNT(OID IN NUMBER) IS
  COUNTER NUMBER;
  ITEM NUMBER;
BEGIN
  --DBMS_OUTPUT.PUT_LINE(OID);
  FOR R IN (SELECT * FROM ORDER_HISTORY WHERE ORDER_ID=OID )
  LOOP
    COUNTER:= R.COUNT;
    ITEM:= R.ITEM_NO;
    --DBMS_OUTPUT.PUT_LINE(ITEM||' '||COUNTER);
    UPDATE MENU SET COUNT_NUMBER=(COUNT_NUMBER-COUNTER) WHERE ITEM_NO =ITEM;
  END LOOP;
END;

--7
CREATE OR REPLACE TRIGGER SET_ORDERSERIAL
AFTER INSERT
ON ORDERS
FOR EACH ROW
DECLARE
  OID NUMBER;
  DID NUMBER;
  USERID NUMBER;
BEGIN
  OID:= :NEW.ORDER_ID;
  DID:= :NEW.DELIVER_MAN_ID;
  USERID:= :NEW.USER_ID;
  INSERT INTO ORDER_SERIAL VALUES(OID,DID,USERID);
  UPDATE DELIVER_MAN SET DELIVERY_COUNT = DELIVERY_COUNT+1 WHERE DELIVER_MAN_ID=DID;
END;

--8
CREATE OR REPLACE TRIGGER SET_DELIVER 
BEFORE INSERT
ON PAYMENT
FOR EACH ROW
DECLARE  
  OID VARCHAR2(200);  
BEGIN  
  OID:= :NEW.ORDER_ID;
  UPDATE ORDERS SET IS_DELIVERED=1 WHERE ORDER_ID=OID;
END;

--9
CREATE OR REPLACE FUNCTION GET_BILL(O_ID IN VARCHAR2) RETURN NUMBER IS
    AMOUNT NUMBER;
BEGIN
  AMOUNT:=0;
  SELECT SUM(COUNT*PRICE) INTO AMOUNT FROM ORDER_HISTORY NATURAL JOIN MENU WHERE ORDER_ID=O_ID;
  RETURN AMOUNT;
END;

